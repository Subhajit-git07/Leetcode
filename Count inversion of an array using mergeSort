########Count inversion of an array using merge sort


def countInversion(arr):
    n = len(arr)
    temp = [0]*n
    return _mergeSort(arr, temp, 0, n-1)

def _mergeSort(arr, temp, left, right):
    count = 0
    if left < right:
        mid = left + (right-left) // 2
        count += _mergeSort(arr, temp, left, mid)
        count += _mergeSort(arr, temp, mid+1, right)
        count += merge(arr, temp, left, mid, right)

    return count

def merge(arr, temp, left, mid, right):
    count = 0
    i = left
    j = mid + 1
    k = left

    while i <= mid and j <= right:
        if arr[i] <= arr[j]:
            temp[k] = arr[i]
            i += 1
            k += 1
        else:
            temp[k] = arr[j]
            count += mid - i + 1
            j += 1
            k += 1
    while i <= mid:
        temp[k] = arr[i]
        i += 1
        k += 1
    while j <= right:
        temp[k] = arr[j]
        j += 1
        k += 1
    for i in range(left, right+1):
        arr[i] = temp[i]
    #print(arr)
    return count

arr = [1, 20, 6, 4, 5]
print(countInversion(arr))
